---
// HeroImage.astro
interface Props {
  title: string;
  category: 'bible' | 'general' | 'tech' | 'photo' | 'language';
  date?: Date;
  width?: number;
  height?: number;
}

const {
  title,
  category,
  date = new Date(),
  width = 1200,
  height = 630,
} = Astro.props;

// Color schemes per category
const colorSchemes = {
  bible: {
    primary: '#7c3aed', // Purple
    secondary: '#4c1d95',
    pattern: 'crosses',
  },
  general: {
    primary: '#2563eb', // Blue
    secondary: '#1e40af',
    pattern: 'circles',
  },
  tech: {
    primary: '#059669', // Green
    secondary: '#047857',
    pattern: 'circuit',
  },
  photo: {
    primary: '#dc2626', // Red
    secondary: '#991b1b',
    pattern: 'camera',
  },
  language: {
    primary: '#d97706', // Amber
    secondary: '#b45309',
    pattern: 'characters',
  }
};

// Pattern definitions
const patterns = {
  crosses: `
    <pattern id="crosses" patternUnits="userSpaceOnUse" width="60" height="60">
      <path d="M20 10h20v20h20v20H40v20H20V50H0V30h20z" fill="currentColor" opacity="0.1"/>
    </pattern>
  `,
  circles: `
    <pattern id="circles" patternUnits="userSpaceOnUse" width="40" height="40">
      <circle cx="20" cy="20" r="15" fill="currentColor" opacity="0.1"/>
    </pattern>
  `,
  circuit: `
    <pattern id="circuit" patternUnits="userSpaceOnUse" width="100" height="100">
      <path d="M10 10h20v20H10zm60 0h20v20H70zm-30 30h20v20H40zm30 30h20v20H70zm-60 0h20v20H10z" fill="currentColor" opacity="0.1"/>
      <path d="M30 20h40M50 30v40" stroke="currentColor" opacity="0.1" stroke-width="2"/>
    </pattern>
  `,
  camera: `
    <pattern id="camera" patternUnits="userSpaceOnUse" width="80" height="80">
      <path d="M20 20h40v30H20z M35 15h10v5H35z" fill="currentColor" opacity="0.1"/>
      <circle cx="40" cy="35" r="10" fill="currentColor" opacity="0.1"/>
    </pattern>
  `,
  characters: `
    <pattern id="characters" patternUnits="userSpaceOnUse" width="80" height="80">
      <text x="10" y="30" font-size="20" fill="currentColor" opacity="0.1">あ</text>
      <text x="40" y="50" font-size="20" fill="currentColor" opacity="0.1">文</text>
      <text x="20" y="70" font-size="20" fill="currentColor" opacity="0.1">字</text>
    </pattern>
  `
};

// Get color scheme for current category
const scheme = colorSchemes[category];

// Format date
const formattedDate = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
}).format(date);

function wrapText(text: string, maxLength: number = 30): string[] {
  const words = text.split(' ');
  const lines: string[] = [];
  let currentLine = '';

  words.forEach(word => {
    if ((currentLine + ' ' + word).length <= maxLength) {
      currentLine += (currentLine ? ' ' : '') + word;
    } else {
      lines.push(currentLine);
      currentLine = word;
    }
  });
  
  if (currentLine) {
    lines.push(currentLine);
  }

  return lines;
}

const wrappedTitle = wrapText(title);

// Category-specific icons (you can add more complex SVG paths here)
const categoryIcons = {
  bible: 'M10 20h80v60h-80z M20 40h60M20 60h60',
  general: 'M50 20v60M20 50h60',
  tech: 'M30 30h40v40h-40z M40 40h20M40 50h20M40 60h20',
  photo: 'M20 30h60v40h-60z M40 50a10 10 0 1 0 20 0 10 10 0 1 0-20 0',
  language: 'M20 20h60v60h-60z M30 40h40M30 50h40M30 60h40'
};

---

<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 {width} {height}"
  width={width}
  height={height}
>
  <defs>
    <!-- Gradient definition -->
    <linearGradient id="bg-gradient" x1="0" y1="0" x2="1" y2="1">
      <stop offset="0%" stop-color={scheme.primary} />
      <stop offset="100%" stop-color={scheme.secondary} />
    </linearGradient>
    
    <!-- Category-specific pattern -->
    <Fragment set:html={patterns[scheme.pattern]} />
  </defs>

  <!-- Background with gradient -->
  <rect width="100%" height="100%" fill="url(#bg-gradient)" />
  
  <!-- Pattern overlay -->
  <rect width="100%" height="100%" fill={`url(#${scheme.pattern})`} />
  
  <!-- Category icon -->
  <g transform="translate(80, 80) scale(0.5)" stroke={scheme.secondary} fill="none" stroke-width="4">
    <path d={categoryIcons[category]} />
  </g>
  
  <!-- Title -->
  {wrappedTitle.map((line, index) => (
    <text
      x="80"
      y={200 + index * 60}
      font-family="system-ui"
      font-weight="bold"
      font-size="48"
      fill="white"
      filter="drop-shadow(0 4px 6px rgb(0 0 0 / 0.3))"
    >
      {line}
    </text>
  ))}
  
  <!-- Category -->
  <text
    x="80"
    y="120"
    font-family="system-ui"
    font-size="32"
    fill="white"
    opacity="0.9"
    filter="drop-shadow(0 2px 4px rgb(0 0 0 / 0.3))"
  >
    {category.charAt(0).toUpperCase() + category.slice(1)}
  </text>
  
  <!-- Date -->
  <text
    x="80"
    y={height - 80}
    font-family="system-ui"
    font-size="24"
    fill="white"
    opacity="0.8"
    filter="drop-shadow(0 2px 4px rgb(0 0 0 / 0.3))"
  >
    {formattedDate}
  </text>
</svg>