---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import PhotoPost from '../../layouts/PhotoPost.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../layouts/BlogPost.astro';

// Define valid section names
type ValidSection = 'general' | 'tech' | 'photo' | 'bible' | 'language';

function isValidSection(section: string): section is ValidSection {
  return ['general', 'tech', 'photo', 'bible', 'language'].includes(section);
}

type AllCollections = CollectionEntry<ValidSection>;

export async function getStaticPaths() {
  const allPosts: AllCollections[] = (await Promise.all([
    getCollection('general'),
    getCollection('tech'),
    getCollection('photo'),
    getCollection('bible'),
    getCollection('language')
  ])).flat();
  
  console.log('Post structure:', allPosts[0]);
  
  return allPosts.map((post) => {
    const section = post.collection;
    const slug = post.id.replace(/\.[^/.]+$/, '')

    return {
      params: {
        section,
        slug,
      },
      props: { post },
    };
  });
}

const { section } = Astro.params;
const { post } = Astro.props;

if (!section || !isValidSection(section)) {
  throw new Error(`Invalid section: ${section}`);
}

const { Content } = await post.render();

// Select the appropriate layout based on the section
const getLayout = (section: ValidSection, post: CollectionEntry<ValidSection>) => {
  switch (section) {
    case 'photo':
      return PhotoPost;
    default:
      // return BaseLayout;
      return BlogPost;
  }
};

const Layout = getLayout(section, post);
---

<Layout {...post.data}>
  <Content />
</Layout>