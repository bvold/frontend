---
import BaseLayout from './BaseLayout.astro';
import FormattedDate from '../components/FormattedDate.astro';
import GiscusComments from '../components/GiscusComments.astro';

type ExifData = {
  dateTaken?: string;
  camera?: string;
  lens?: string;
  focalLength?: string;
  // aperture?: string | number;
  aperture?: string;
  // shutterSpeed?: string | number;
  shutterSpeed?: string;
  iso?: number;
};

type GalleryImage = {
  url: string;
  caption?: string;
  alt: string;
  exif?: ExifData;
};

interface Props {
  title: string;
  description?: string;
  pubDate: Date;
  updatedDate?: Date;
  heroImage?: string;
  heroExif?: ExifData;
  camera?: string;
  lens?: string;
  gallery?: GalleryImage[];
}

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  heroExif,
  // camera,
  // lens,
  gallery
} = Astro.props;

function formatExifData(exif: ExifData | undefined): string[] {
  if (!exif) return [];
  const parts: string[] = [];
  
  // if (exif.aperture) parts.push(`ƒ/${typeof exif.aperture === 'number' ? exif.aperture.toFixed(1) : exif.aperture}`);
  if (exif.aperture) parts.push(`ƒ/${exif.aperture.toString()}`);
  if (exif.shutterSpeed) {
    const speed = typeof exif.shutterSpeed === 'number' 
      ? exif.shutterSpeed < 1 ? `1/${Math.round(1/exif.shutterSpeed)}` : `${exif.shutterSpeed}`
      : exif.shutterSpeed;
    parts.push(`${speed}s`);
  }
  if (exif.iso) parts.push(`ISO ${exif.iso}`);
  if (exif.focalLength) parts.push(`${exif.focalLength.replace('mm', '')}mm`);
  
  return parts;
}

function formatDate(dateString: string | undefined): string {
  if (!dateString) return '';
  
  // Convert "YYYY:MM:DD HH:MM:SS" to "YYYY-MM-DDTHH:MM:SS"
  const formattedDateString = dateString.replace(/^(\d{4}):(\d{2}):(\d{2})/, '$1-$2-$3').replace(' ', 'T');
  const date = new Date(formattedDateString);

  console.log('dateString:', dateString);                // Original format
  console.log('formattedDateString:', formattedDateString);  // Reformatted for Date parsing
  console.log('date:', date);                             // Date object

  return date.toLocaleDateString(undefined, { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

---

<BaseLayout title={title} description={description}>
  <article class="max-w-4xl mx-auto px-4">
    {heroImage && (
      <div class="relative mb-8">
        <img
          src={heroImage}
          alt={title}
          class="w-full h-[600px] object-cover rounded-lg shadow-lg"
        />
        {heroExif && (
          <div class="absolute bottom-4 left-4 right-4 bg-black/75 text-white px-6 py-4 rounded-lg backdrop-blur-sm">
            <div class="flex flex-wrap gap-6 items-center text-sm">
              {heroExif.camera && (
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z" />
                    <circle cx="12" cy="13" r="3" />
                  </svg>
                  <span>{heroExif.camera}</span>
                </div>
              )}
              {heroExif.lens && (
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M3 3h18v18H3z" />
                    <path d="M21 21L3 3" />
                  </svg>
                  <span>{heroExif.lens}</span>
                </div>
              )}
              {heroExif.dateTaken && (
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="10" />
                    <path d="M12 6v6l4 2" />
                  </svg>
                  <span>{formatDate(heroExif.dateTaken)}</span>
                </div>
              )}
            </div>
            <div class="flex flex-wrap gap-4 mt-2 text-sm text-gray-200">
              {formatExifData(heroExif).map((detail) => (
                <span class="flex items-center gap-1">
                  {detail.includes('ƒ/') && (
                    <svg class="w-3.5 h-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <circle cx="12" cy="12" r="10" />
                      <path d="M14.31 8l5.74 5.74M5.95 18.37l5.74-5.74M12 12v4M12 12h4" />
                    </svg>
                  )}
                  {detail.includes('ISO') && (
                    <svg class="w-3.5 h-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z" />
                    </svg>
                  )}
                  {detail}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>
    )}

    <header class="mb-8">
      <h1 class="text-4xl font-bold mb-4">{title}</h1>
      {description && (
        <p class="text-xl text-gray-600 mb-4">{description}</p>
      )}
      <div class="flex items-center gap-4 text-gray-500">
        <FormattedDate date={pubDate} />
        {updatedDate && (
          <span>
            Updated: <FormattedDate date={updatedDate} format="short" />
          </span>
        )}
      </div>
    </header>

    {/* Main Content */}
    <div class="prose max-w-none mb-12">
      <slot />
    </div>

    {/* Photo Gallery */}
    {gallery && gallery.length > 0 && (
      <div class="mt-12">
        <h2 class="text-2xl font-bold mb-6">Photo Gallery</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {gallery.map((photo) => (
            <div class="group relative">
              <img
                src={photo.url}
                alt={photo.alt}
                class="w-full aspect-[4/3] object-cover rounded-lg shadow-lg transition-transform duration-300 group-hover:scale-[1.02]"
              />
              <div class="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/75 via-black/50 to-transparent text-white rounded-b-lg">
                {photo.caption && (
                  <p class="mb-2 font-medium">{photo.caption}</p>
                )}
                {photo.exif && (
                  <div class="space-y-1 text-sm">
                    <div class="flex flex-wrap gap-3">
                      {photo.exif.camera && (
                        <span class="flex items-center gap-1">
                          <svg class="w-3.5 h-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z" />
                            <circle cx="12" cy="13" r="3" />
                          </svg>
                          {photo.exif.camera}
                        </span>
                      )}
                      {photo.exif.dateTaken && (
                        <span class="flex items-center gap-1">
                          <svg class="w-3.5 h-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10" />
                            <path d="M12 6v6l4 2" />
                          </svg>
                          {formatDate(photo.exif.dateTaken)}
                        </span>
                      )}
                    </div>
                    <div class="flex flex-wrap gap-3 text-gray-200">
                      {formatExifData(photo.exif).map((detail) => (
                        <span class="flex items-center gap-1">
                          {detail.includes('ƒ/') && (
                            <svg class="w-3.5 h-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <circle cx="12" cy="12" r="10" />
                              <path d="M14.31 8l5.74 5.74M5.95 18.37l5.74-5.74M12 12v4M12 12h4" />
                            </svg>
                          )}
                          {detail.includes('ISO') && (
                            <svg class="w-3.5 h-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z" />
                            </svg>
                          )}
                          {detail}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    )}
  </article>
  <GiscusComments />
</BaseLayout>

<style>
  img {
    transition: transform 0.3s ease-in-out;
  }
  
  .gallery-image:hover {
    transform: scale(1.02);
  }
</style>